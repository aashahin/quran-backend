generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER MODELS
// =============================================================================

model User {
  id              String    @id @default(cuid(2))
  name            String
  username        String?   @unique
  displayUsername String?
  email           String    @unique
  role            UserRole  @default(user)
  bio             String?
  location        String?
  emailVerified   Boolean
  image           String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  isAnonymous     Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  sessions          Session[]
  accounts          Account[]
  bookmarks         Bookmark[]
  userSettings      UserSetting?
  memorizationTests MemorizationTest[]
  readingProgress   ReadingProgress[]

  @@index([email])
  @@index([role])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid(2))
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid(2))
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UserRole {
  admin
  user
}

// =============================================================================
// USER FEATURES MODELS
// =============================================================================

model Bookmark {
  id         String   @id @default(cuid(2))
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  surahId    String // Reference to surah in JSON file
  ayahNumber Int // Reference to ayah in JSON file
  name       String?
  note       String?
  createdAt  DateTime @default(now())

  @@map("bookmark")
}

model MemorizationTest {
  id              String    @id @default(cuid(2))
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startSurahId    String // Reference to surah in JSON file
  startAyahNumber Int
  endSurahId      String // Reference to surah in JSON file
  endAyahNumber   Int
  score           Int?
  mistakes        Int?
  duration        Int? // in seconds
  createdAt       DateTime  @default(now())
  completedAt     DateTime?

  @@map("memorization_test")
}

// =============================================================================
// SETTINGS MODELS
// =============================================================================

model UserSetting {
  id          String   @id @default(cuid(2))
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String
  value       String?
  metadata    String?
  lastUpdated DateTime @default(now())

  @@map("user_setting")
}

model ReadingProgress {
  id         String   @id @default(cuid(2))
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  surahId    Int // Reference to surah in JSON file
  ayahNumber Int
  juzId      Int? // Reference to juz in JSON file
  pageNumber Int?
  timestamp  DateTime @default(now())

  @@map("reading_progress")
}
